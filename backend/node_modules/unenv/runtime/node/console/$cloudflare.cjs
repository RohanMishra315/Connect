"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Console", {
  enumerable: true,
  get: function () {
    return _index.Console;
  }
});
Object.defineProperty(exports, "_ignoreErrors", {
  enumerable: true,
  get: function () {
    return _index._ignoreErrors;
  }
});
Object.defineProperty(exports, "_stderr", {
  enumerable: true,
  get: function () {
    return _index._stderr;
  }
});
Object.defineProperty(exports, "_stderrErrorHandler", {
  enumerable: true,
  get: function () {
    return _index._stderrErrorHandler;
  }
});
Object.defineProperty(exports, "_stdout", {
  enumerable: true,
  get: function () {
    return _index._stdout;
  }
});
Object.defineProperty(exports, "_stdoutErrorHandler", {
  enumerable: true,
  get: function () {
    return _index._stdoutErrorHandler;
  }
});
Object.defineProperty(exports, "_times", {
  enumerable: true,
  get: function () {
    return _index._times;
  }
});
exports.warn = exports.trace = exports.timeStamp = exports.timeLog = exports.timeEnd = exports.time = exports.table = exports.profileEnd = exports.profile = exports.log = exports.info = exports.groupEnd = exports.groupCollapsed = exports.group = exports.error = exports.dirxml = exports.dir = exports.default = exports.debug = exports.createTask = exports.countReset = exports.count = exports.context = exports.clear = exports.assert = void 0;
var _index = require("./index.cjs");
const workerdConsole = globalThis["console"];
const {
  assert,
  clear,
  // @ts-expect-error undocumented public API
  context,
  count,
  countReset,
  // @ts-expect-error undocumented public API
  createTask,
  debug,
  dir,
  dirxml,
  error,
  group,
  groupCollapsed,
  groupEnd,
  info,
  log,
  profile,
  profileEnd,
  table,
  time,
  timeEnd,
  timeLog,
  timeStamp,
  trace,
  warn
} = workerdConsole;
exports.warn = warn;
exports.trace = trace;
exports.timeStamp = timeStamp;
exports.timeLog = timeLog;
exports.timeEnd = timeEnd;
exports.time = time;
exports.table = table;
exports.profileEnd = profileEnd;
exports.profile = profile;
exports.log = log;
exports.info = info;
exports.groupEnd = groupEnd;
exports.groupCollapsed = groupCollapsed;
exports.group = group;
exports.error = error;
exports.dirxml = dirxml;
exports.dir = dir;
exports.debug = debug;
exports.createTask = createTask;
exports.countReset = countReset;
exports.count = count;
exports.context = context;
exports.clear = clear;
exports.assert = assert;
Object.assign(workerdConsole, {
  Console: _index.Console,
  _ignoreErrors: _index._ignoreErrors,
  _stderr: _index._stderr,
  _stderrErrorHandler: _index._stderrErrorHandler,
  _stdout: _index._stdout,
  _stdoutErrorHandler: _index._stdoutErrorHandler,
  _times: _index._times
});
module.exports = workerdConsole;