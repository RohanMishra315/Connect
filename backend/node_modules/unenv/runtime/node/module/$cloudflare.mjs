export {
  Module,
  SourceMap,
  _cache,
  _extensions,
  _debug,
  _pathCache,
  _findPath,
  _initPaths,
  _load,
  _nodeModulePaths,
  _preloadModules,
  _resolveFilename,
  _resolveLookupPaths,
  builtinModules,
  findSourceMap,
  globalPaths,
  isBuiltin,
  register,
  runMain,
  syncBuiltinESMExports,
  wrap
} from "./index.mjs";
import {
  Module as Module2,
  SourceMap as SourceMap2,
  _cache as _cache2,
  _extensions as _extensions2,
  _debug as _debug2,
  _pathCache as _pathCache2,
  _findPath as _findPath2,
  _initPaths as _initPaths2,
  _load as _load2,
  _nodeModulePaths as _nodeModulePaths2,
  _preloadModules as _preloadModules2,
  _resolveFilename as _resolveFilename2,
  _resolveLookupPaths as _resolveLookupPaths2,
  builtinModules as builtinModules2,
  createRequire as unenvCreateRequire,
  findSourceMap as findSourceMap2,
  globalPaths as globalPaths2,
  isBuiltin as isBuiltin2,
  register as register2,
  runMain as runMain2,
  syncBuiltinESMExports as syncBuiltinESMExports2,
  wrap as wrap2
} from "./index.mjs";
const workerdModule = process.getBuiltinModule("node:module");
export function createRequire(file) {
  const requirePolyfill = unenvCreateRequire(file);
  if (!workerdModule?.createRequire) {
    return requirePolyfill;
  }
  const requireFn = workerdModule.createRequire(file);
  if (!requireFn.resolve) {
    requireFn.resolve = requirePolyfill.resolve;
  }
  if (!requireFn.cache) {
    requireFn.cache = requirePolyfill.cache;
  }
  if (!requireFn.extensions) {
    requireFn.extensions = requirePolyfill.extensions;
  }
  if (!requireFn.main) {
    requireFn.main = requirePolyfill.main;
  }
  return requireFn;
}
export default {
  Module: Module2,
  SourceMap: SourceMap2,
  _cache: _cache2,
  _extensions: _extensions2,
  _debug: _debug2,
  _pathCache: _pathCache2,
  _findPath: _findPath2,
  _initPaths: _initPaths2,
  _load: _load2,
  _nodeModulePaths: _nodeModulePaths2,
  _preloadModules: _preloadModules2,
  _resolveFilename: _resolveFilename2,
  _resolveLookupPaths: _resolveLookupPaths2,
  builtinModules: builtinModules2,
  createRequire,
  findSourceMap: findSourceMap2,
  globalPaths: globalPaths2,
  isBuiltin: isBuiltin2,
  register: register2,
  runMain: runMain2,
  syncBuiltinESMExports: syncBuiltinESMExports2,
  wrap: wrap2
};
