import type nodeModule from "node:module";
export declare const _cache: any;
export declare const _extensions: {
    ".js": (...args: any) => any;
    ".json": (...args: any) => any;
    ".node": (...args: any) => any;
};
export declare const createRequire: (filename: string) => ((...args: any) => any) & {
    resolve: ((...args: any) => any) & {
        paths: (...args: any) => any;
    };
    cache: any;
    extensions: {
        ".js": (...args: any) => any;
        ".json": (...args: any) => any;
        ".node": (...args: any) => any;
    };
    main: undefined;
};
export declare const builtinModules: typeof nodeModule.builtinModules;
export declare const isBuiltin: typeof nodeModule.isBuiltin;
export declare const runMain: typeof nodeModule.runMain;
export declare const register: typeof nodeModule.register;
export declare const syncBuiltinESMExports: typeof nodeModule.syncBuiltinESMExports;
export declare const findSourceMap: typeof nodeModule.findSourceMap;
export declare const wrap: typeof nodeModule.wrap;
export declare const SourceMap: typeof nodeModule.SourceMap;
export declare const _debug: {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare const _findPath: (...args: any) => any;
export declare const _initPaths: (...args: any) => any;
export declare const _load: (...args: any) => any;
export declare const _nodeModulePaths: (...args: any) => any;
export declare const _preloadModules: (...args: any) => any;
export declare const _resolveFilename: (...args: any) => any;
export declare const _resolveLookupPaths: (...args: any) => any;
export declare const _pathCache: any;
export declare const globalPaths: string[];
export declare class _Module implements NodeJS.Module {
    require: NodeJS.Require;
    id: string;
    filename: string;
    exports: any;
    parent: undefined;
    loaded: boolean;
    children: never[];
    isPreloading: boolean;
    path: string;
    paths: string[];
    constructor(id?: string);
}
export declare const Module: {
    readonly Module: any;
    SourceMap: any;
    _cache: any;
    _extensions: {
        ".js": (...args: any) => any;
        ".json": (...args: any) => any;
        ".node": (...args: any) => any;
    };
    _debug: {
        (...data: any[]): void;
        (message?: any, ...optionalParams: any[]): void;
    };
    _pathCache: any;
    _findPath: (...args: any) => any;
    _initPaths: (...args: any) => any;
    _load: (...args: any) => any;
    _nodeModulePaths: (...args: any) => any;
    _preloadModules: (...args: any) => any;
    _resolveFilename: (...args: any) => any;
    _resolveLookupPaths: (...args: any) => any;
    builtinModules: any;
    createRequire: (filename: string) => ((...args: any) => any) & {
        resolve: ((...args: any) => any) & {
            paths: (...args: any) => any;
        };
        cache: any;
        extensions: {
            ".js": (...args: any) => any;
            ".json": (...args: any) => any;
            ".node": (...args: any) => any;
        };
        main: undefined;
    };
    findSourceMap: any;
    globalPaths: string[];
    isBuiltin: any;
    register: any;
    runMain: any;
    syncBuiltinESMExports: any;
    wrap: any;
};
export default Module;
