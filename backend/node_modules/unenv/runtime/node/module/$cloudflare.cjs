"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Module", {
  enumerable: true,
  get: function () {
    return _index.Module;
  }
});
Object.defineProperty(exports, "SourceMap", {
  enumerable: true,
  get: function () {
    return _index.SourceMap;
  }
});
Object.defineProperty(exports, "_cache", {
  enumerable: true,
  get: function () {
    return _index._cache;
  }
});
Object.defineProperty(exports, "_debug", {
  enumerable: true,
  get: function () {
    return _index._debug;
  }
});
Object.defineProperty(exports, "_extensions", {
  enumerable: true,
  get: function () {
    return _index._extensions;
  }
});
Object.defineProperty(exports, "_findPath", {
  enumerable: true,
  get: function () {
    return _index._findPath;
  }
});
Object.defineProperty(exports, "_initPaths", {
  enumerable: true,
  get: function () {
    return _index._initPaths;
  }
});
Object.defineProperty(exports, "_load", {
  enumerable: true,
  get: function () {
    return _index._load;
  }
});
Object.defineProperty(exports, "_nodeModulePaths", {
  enumerable: true,
  get: function () {
    return _index._nodeModulePaths;
  }
});
Object.defineProperty(exports, "_pathCache", {
  enumerable: true,
  get: function () {
    return _index._pathCache;
  }
});
Object.defineProperty(exports, "_preloadModules", {
  enumerable: true,
  get: function () {
    return _index._preloadModules;
  }
});
Object.defineProperty(exports, "_resolveFilename", {
  enumerable: true,
  get: function () {
    return _index._resolveFilename;
  }
});
Object.defineProperty(exports, "_resolveLookupPaths", {
  enumerable: true,
  get: function () {
    return _index._resolveLookupPaths;
  }
});
Object.defineProperty(exports, "builtinModules", {
  enumerable: true,
  get: function () {
    return _index.builtinModules;
  }
});
exports.createRequire = createRequire;

Object.defineProperty(exports, "findSourceMap", {
  enumerable: true,
  get: function () {
    return _index.findSourceMap;
  }
});
Object.defineProperty(exports, "globalPaths", {
  enumerable: true,
  get: function () {
    return _index.globalPaths;
  }
});
Object.defineProperty(exports, "isBuiltin", {
  enumerable: true,
  get: function () {
    return _index.isBuiltin;
  }
});
Object.defineProperty(exports, "register", {
  enumerable: true,
  get: function () {
    return _index.register;
  }
});
Object.defineProperty(exports, "runMain", {
  enumerable: true,
  get: function () {
    return _index.runMain;
  }
});
Object.defineProperty(exports, "syncBuiltinESMExports", {
  enumerable: true,
  get: function () {
    return _index.syncBuiltinESMExports;
  }
});
Object.defineProperty(exports, "wrap", {
  enumerable: true,
  get: function () {
    return _index.wrap;
  }
});
var _index = require("./index.cjs");
const workerdModule = process.getBuiltinModule("node:module");
function createRequire(file) {
  const requirePolyfill = (0, _index.createRequire)(file);
  if (!workerdModule?.createRequire) {
    return requirePolyfill;
  }
  const requireFn = workerdModule.createRequire(file);
  if (!requireFn.resolve) {
    requireFn.resolve = requirePolyfill.resolve;
  }
  if (!requireFn.cache) {
    requireFn.cache = requirePolyfill.cache;
  }
  if (!requireFn.extensions) {
    requireFn.extensions = requirePolyfill.extensions;
  }
  if (!requireFn.main) {
    requireFn.main = requirePolyfill.main;
  }
  return requireFn;
}
module.exports = {
  Module: _index.Module,
  SourceMap: _index.SourceMap,
  _cache: _index._cache,
  _extensions: _index._extensions,
  _debug: _index._debug,
  _pathCache: _index._pathCache,
  _findPath: _index._findPath,
  _initPaths: _index._initPaths,
  _load: _index._load,
  _nodeModulePaths: _index._nodeModulePaths,
  _preloadModules: _index._preloadModules,
  _resolveFilename: _index._resolveFilename,
  _resolveLookupPaths: _index._resolveLookupPaths,
  builtinModules: _index.builtinModules,
  createRequire,
  findSourceMap: _index.findSourceMap,
  globalPaths: _index.globalPaths,
  isBuiltin: _index.isBuiltin,
  register: _index.register,
  runMain: _index.runMain,
  syncBuiltinESMExports: _index.syncBuiltinESMExports,
  wrap: _index.wrap
};